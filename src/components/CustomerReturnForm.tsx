import React, { useState, useEffect } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { toast } from '@/hooks/use-toast';
import { Plus, Trash2, Search } from 'lucide-react';

interface CustomerReturnFormProps {
  returnData?: any;
  onSuccess?: () => void;
  onCancel?: () => void;
}

const CustomerReturnForm = ({ returnData, onSuccess, onCancel }: CustomerReturnFormProps) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const [formData, setFormData] = useState({
    customer_id: returnData?.customer_id || '',
    order_id: returnData?.order_id || '',
    reason: returnData?.reason || '',
    return_date: returnData?.return_date || new Date().toISOString().split('T')[0],
    status: returnData?.status || 'pending'
  });
  const [items, setItems] = useState(returnData?.customer_return_items || []);
  const [searchProduct, setSearchProduct] = useState('');

  // Fetch customers
  const { data: customers = [] } = useQuery({
    queryKey: ['customers-select'],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('customers')
        .select('id, name, customer_code')
        .order('name');
      if (error) throw error;
      return data;
    }
  });

  // Fetch orders for selected customer
  const { data: orders = [] } = useQuery({
    queryKey: ['customer-orders', formData.customer_id],
    queryFn: async () => {
      if (!formData.customer_id) return [];
      const { data, error } = await supabase
        .from('orders')
        .select('id, order_number, total_amount, created_at')
        .eq('customer_id', formData.customer_id)
        .eq('status', 'delivered')
        .order('created_at', { ascending: false });
      if (error) throw error;
      return data;
    },
    enabled: !!formData.customer_id
  });

  // Fetch products for search
  const { data: products = [] } = useQuery({
    queryKey: ['products-search', searchProduct],
    queryFn: async () => {
      if (!searchProduct || searchProduct.length < 2) return [];
      const { data, error } = await supabase
        .from('products')
        .select('id, name, selling_price, current_stock')
        .ilike('name', `%${searchProduct}%`)
        .limit(10);
      if (error) throw error;
      return data;
    },
    enabled: searchProduct.length >= 2
  });

  const saveMutation = useMutation({
    mutationFn: async (data: any) => {
      if (returnData?.id) {
        // Update existing return
        const { error: returnError } = await supabase
          .from('customer_returns')
          .update({
            customer_id: data.customer_id,
            order_id: data.order_id,
            reason: data.reason,
            return_date: data.return_date,
            status: data.status,
            total_amount: data.total_amount
          })
          .eq('id', returnData.id);

        if (returnError) throw returnError;

        // Delete existing items and insert new ones
        await supabase
          .from('customer_return_items')
          .delete()
          .eq('customer_return_id', returnData.id);

        if (data.items.length > 0) {
          const { error: itemsError } = await supabase
            .from('customer_return_items')
            .insert(data.items.map((item: any) => ({
              ...item,
              customer_return_id: returnData.id
            })));

          if (itemsError) throw itemsError;
        }
      } else {
        // Create new return
        const { data: newReturn, error: returnError } = await supabase
          .from('customer_returns')
          .insert({
            customer_id: data.customer_id,
            order_id: data.order_id,
            reason: data.reason,
            return_date: data.return_date,
            status: data.status,
            total_amount: data.total_amount,
            processed_by: user?.id,
            return_number: '' // Will be auto-generated by trigger
          })
          .select()
          .single();

        if (returnError) throw returnError;

        if (data.items.length > 0) {
          const { error: itemsError } = await supabase
            .from('customer_return_items')
            .insert(data.items.map((item: any) => ({
              ...item,
              customer_return_id: newReturn.id
            })));

          if (itemsError) throw itemsError;
        }
      }
    },
    onSuccess: () => {
      toast({
        title: 'Berhasil',
        description: `Return pelanggan berhasil ${returnData?.id ? 'diperbarui' : 'ditambahkan'}`,
      });
      queryClient.invalidateQueries({ queryKey: ['customer-returns'] });
      onSuccess?.();
    },
    onError: (error: any) => {
      toast({
        title: 'Error',
        description: error.message || 'Gagal menyimpan return',
        variant: 'destructive',
      });
    }
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.customer_id || items.length === 0) {
      toast({
        title: 'Error',
        description: 'Customer dan item return wajib diisi',
        variant: 'destructive',
      });
      return;
    }

    const totalAmount = items.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);

    saveMutation.mutate({
      ...formData,
      total_amount: totalAmount,
      items: items.map(item => ({
        product_id: item.product_id || item.id,
        quantity: item.quantity,
        unit_price: item.unit_price,
        total_price: item.quantity * item.unit_price
      }))
    });
  };

  const addItem = (product: any) => {
    const existingItem = items.find(item => (item.product_id || item.id) === product.id);
    if (existingItem) {
      setItems(items.map(item => 
        (item.product_id || item.id) === product.id
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setItems([...items, {
        id: product.id,
        product_id: product.id,
        name: product.name,
        quantity: 1,
        unit_price: product.selling_price
      }]);
    }
    setSearchProduct('');
  };

  const removeItem = (index: number) => {
    setItems(items.filter((_, i) => i !== index));
  };

  const updateItemQuantity = (index: number, quantity: number) => {
    if (quantity <= 0) return;
    setItems(items.map((item, i) => 
      i === index ? { ...item, quantity } : item
    ));
  };

  const updateItemPrice = (index: number, price: number) => {
    if (price < 0) return;
    setItems(items.map((item, i) => 
      i === index ? { ...item, unit_price: price } : item
    ));
  };

  const totalAmount = items.reduce((sum, item) => sum + (item.quantity * item.unit_price), 0);

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Informasi Return Pelanggan</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="customer">Customer *</Label>
              <Select value={formData.customer_id} onValueChange={(value) => setFormData({...formData, customer_id: value, order_id: ''})}>
                <SelectTrigger>
                  <SelectValue placeholder="Pilih customer" />
                </SelectTrigger>
                <SelectContent>
                  {customers.map(customer => (
                    <SelectItem key={customer.id} value={customer.id}>
                      {customer.customer_code} - {customer.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="order">Order (Opsional)</Label>
              <Select value={formData.order_id} onValueChange={(value) => setFormData({...formData, order_id: value})}>
                <SelectTrigger>
                  <SelectValue placeholder="Pilih order" />
                </SelectTrigger>
                <SelectContent>
                  {orders.map(order => (
                    <SelectItem key={order.id} value={order.id}>
                      {order.order_number} - Rp {order.total_amount?.toLocaleString('id-ID')}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="return_date">Tanggal Return</Label>
              <Input
                id="return_date"
                type="date"
                value={formData.return_date}
                onChange={(e) => setFormData({...formData, return_date: e.target.value})}
                required
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="status">Status</Label>
              <Select value={formData.status} onValueChange={(value) => setFormData({...formData, status: value})}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pending">Pending</SelectItem>
                  <SelectItem value="approved">Approved</SelectItem>
                  <SelectItem value="rejected">Rejected</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="reason">Alasan Return</Label>
            <Textarea
              id="reason"
              value={formData.reason}
              onChange={(e) => setFormData({...formData, reason: e.target.value})}
              placeholder="Masukkan alasan return..."
              rows={3}
            />
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Item Return</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>Cari Produk</Label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="Ketik nama produk..."
                value={searchProduct}
                onChange={(e) => setSearchProduct(e.target.value)}
                className="pl-10"
              />
            </div>
            {products.length > 0 && (
              <div className="border rounded-md max-h-40 overflow-y-auto">
                {products.map(product => (
                  <div
                    key={product.id}
                    className="p-2 hover:bg-gray-50 cursor-pointer border-b last:border-b-0"
                    onClick={() => addItem(product)}
                  >
                    <div className="flex justify-between items-center">
                      <span className="font-medium">{product.name}</span>
                      <span className="text-sm text-gray-500">
                        Rp {product.selling_price?.toLocaleString('id-ID')}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {items.length > 0 && (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Produk</TableHead>
                  <TableHead>Qty</TableHead>
                  <TableHead>Harga</TableHead>
                  <TableHead>Total</TableHead>
                  <TableHead>Aksi</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {items.map((item, index) => (
                  <TableRow key={index}>
                    <TableCell>{item.name}</TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={item.quantity}
                        onChange={(e) => updateItemQuantity(index, parseInt(e.target.value) || 1)}
                        className="w-20"
                        min="1"
                      />
                    </TableCell>
                    <TableCell>
                      <Input
                        type="number"
                        value={item.unit_price}
                        onChange={(e) => updateItemPrice(index, parseFloat(e.target.value) || 0)}
                        className="w-28"
                        min="0"
                      />
                    </TableCell>
                    <TableCell>
                      Rp {(item.quantity * item.unit_price).toLocaleString('id-ID')}
                    </TableCell>
                    <TableCell>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeItem(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
                <TableRow>
                  <TableCell colSpan={3} className="font-bold">Total</TableCell>
                  <TableCell className="font-bold">
                    Rp {totalAmount.toLocaleString('id-ID')}
                  </TableCell>
                  <TableCell></TableCell>
                </TableRow>
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      <div className="flex gap-2">
        <Button type="button" variant="outline" onClick={onCancel}>
          Batal
        </Button>
        <Button 
          type="submit" 
          disabled={saveMutation.isPending}
          className="flex-1"
        >
          {saveMutation.isPending ? 'Menyimpan...' : returnData?.id ? 'Update Return' : 'Simpan Return'}
        </Button>
      </div>
    </form>
  );
};

export default CustomerReturnForm;